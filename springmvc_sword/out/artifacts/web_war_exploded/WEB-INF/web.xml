<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<!-- 无关 SpringMVC ，自己加深对 Listener 的理解 -->
	<!--
	&lt;!&ndash; 注册针对ServletContext对象进行监听的监听器 &ndash;&gt;
	<listener>
		<description>MyRequestAndSessionAttributeListener监听器</description>
		<listener-class>indi.sword.springmvc._00_listenerbase.MyServletContextListener</listener-class>
	</listener>

	&lt;!&ndash;注册针对HttpSession对象进行监听的监听器&ndash;&gt;
	<listener>
		<description>HttpSessionListener监听器</description>
		<listener-class>indi.sword.springmvc._00_listenerbase.MyHttpSessionListener</listener-class>
	</listener>
	&lt;!&ndash; 配置HttpSession对象的销毁时机 &ndash;&gt;
	<session-config>
		&lt;!&ndash;配置HttpSession对象的1分钟之后销毁 &ndash;&gt;
		<session-timeout>1</session-timeout>
	</session-config>

	&lt;!&ndash;注册针对ServletRequest对象进行监听的监听器&ndash;&gt;
	<listener>
		<description>ServletRequestListener监听器</description>
		<listener-class>indi.sword.springmvc._00_listenerbase.MyServletRequestListener</listener-class>
	</listener>

-->
<!--
	<listener>
		<description>MyServletContextAttributeListener监听器</description>
		<listener-class>indi.sword.springmvc._00_listenerbase.MyServletContextAttributeListener</listener-class>
	</listener>
	<listener>
	    <description>MyRequestAndSessionAttributeListener监听器</description>
	    <listener-class>indi.sword.springmvc._00_listenerbase.MyRequestAndSessionAttributeListener</listener-class>
    </listener>
-->
	<!--    ↑↑↑↑ 上面关于Listener的测试 可以删掉  ↑↑↑↑  -->

	<!-- 配置启动 Spring IOC 容器的 Listener -->
	<!-- 视频第61,最后步骤，Spring 整合 springMVC -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring-context.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 配置 DispatcherServlet,也即Spring MVC配置 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 配置 DispatcherServlet 的一个初始化参数: 配置 SpringMVC 配置文件的位置和名称 -->
		<!--
			实际上也可以不通过 contextConfigLocation 来配置 SpringMVC 的配置文件, 而使用默认的.
			默认的配置文件为: /WEB-INF/<servlet-name>-servlet.xml
		-->
		<!--
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param>
		-->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!--    ↑↑↑↑ Helloworld的配置就这一些够了  ↑↑↑↑  -->


	<!-- 配置 HiddenHttpMethodFilter: 把 POST 请求转为 DELETE、PUT 请求 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>