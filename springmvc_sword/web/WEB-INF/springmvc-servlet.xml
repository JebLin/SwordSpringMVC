<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!--
			需要进行 Spring 整合 SpringMVC 吗？
			还是否需要加入 Spring 的 IOC容器？
			是否需要在 web.xml 文件中配置启动 Spring IOC 容器的 ContextLoaderListener?

			1. 需要：通常情况下，类似于数据源，事务，整合其他框架都是放在Spring的配置文件中的（而不是放在SpringMVC配置中）.
			实际上放入 Spring 的配置文件对应的 IOC 容器中还有 Service 和 Dao.
			2. 不需要：都放在 Spring MVC 配置文件中。也可以分多个 Spring 的配置文件，然后使用 import 节点导入其他的配置文件。
	-->

	<!-- 配置自定扫描的包 -->
	<context:component-scan base-package="indi.sword.springmvc">
		<context:include-filter type="annotation"
								expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation"
								expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>


<!--
	ConversionService 是 Spring 类型转换体系的核心接口。
	可以利用 ConversionServiceFactoryBean 在 Spring 的 IOC容器中定义一个 ConversionService.
	Spring 将自动识别出 IOC 容器中的 ConversionService，并在 Bean 属性配置及Spring MVC 处理方法入参绑定等场合使用它进行数据的转换
	可通过 ConversionServiceFactoryBean 的 converters 属性注册自定义的类型转换器
-->
	<!-- 在实际开发中通常都需配置 mvc:annotation-driven 标签 -->
	<!--<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>-->
	<mvc:annotation-driven></mvc:annotation-driven>

	<!--    ↑↑↑↑ Helloworld的配置就这一些够了  ↑↑↑↑  -->

	<!--
		default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
		它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的
		Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

		一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
		若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定

	-->
	<mvc:default-servlet-handler/>

	<!-- 自定义ConversionService，使得前端能够传入指定格式的字符串，后端直接转换成JAVA对象 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="employeeConverter"></ref>
			</set>
		</property>
	</bean>

	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 下面的value i18nn，系统会默认加上.properties然后去resources里面找 -->
		<property name="basename" value="i18nn"></property>
	</bean>


	<!--
		不想要通过controller，只想直接地跳转到目标页面，这时候就可以使用mvc:view-controller标签：
		path="/international/i18n" 就是你访问的路径（相当于RequestMapping("/international/i18n")）
		view-name="jsp_international/i18n"是你所要的视图（如hello.jsp,相当于return "jsp_international/i18n"）
		注意：
		在springmvc配置文件中必须加上<mvc:annotation-driven/>
	-->
	<mvc:view-controller path="/success" view-name="success" />
	<mvc:view-controller path="/international/" view-name="jsp_international/index" />
	<mvc:view-controller path="/international/i18n" view-name="jsp_international/i18n" />
	<mvc:view-controller path="/international/i18n2" view-name="jsp_international/i18n2" />
	<mvc:view-controller path="/listener/servletContextAttributeListenerTest" view-name="jsp_listener/ServletContextAttributeListenerTest" />
	<mvc:view-controller path="/listener/RequestAndSessionAttributeListenerTest" view-name="jsp_listener/RequestAndSessionAttributeListenerTest" />
	<mvc:view-controller path="/listener/HttpSessionListenerTest" view-name="jsp_listener/HttpSessionListenerTest" />

	<!-- 配置 MuitipartResoulver 用于文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="5242880"></property>
	</bean>


	<mvc:interceptors>
		<!-- 配置自定义拦截器 -->
		<!--<bean class="indi.sword.springmvc._08Intercepter.FirstIntercepter"></bean>-->

		<!-- 配置指定拦截器 -->
		<mvc:interceptor>
			<!--
				通配符wildcard，注意通配符匹配不包括目录分隔符 “/”.
				？:匹配一个字符 ，如 /admin?  将匹配 /admin1,但是不匹配 /admin 或者子路径 /admin/1
				* :匹配一个或者多个字符，如 /admin* 将匹配 /admin /admin1 但是不匹配子路径 /admin/1
				**:匹配路径中的零个或者多个路径 ，如 /admin** 将匹配 /admin /admin1 admin/1 admin/a/b 等等
			-->
			<mvc:mapping path="/json/**"/>
			<bean class="indi.sword.springmvc._08Intercepter.SecondIntercepter"></bean>
		</mvc:interceptor>

		<!-- 配置  LocaleChangeInterceptor -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>

	<!-- 配置 SimpleMappingExceptionResolver -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 重新配置SimpleMappingExceptionResolver的exceptionAttribute值，用于在error.jsp中显示 -->
		<property name="exceptionAttribute" value="ex"></property>
		<property name="exceptionMappings">
			<props>
				<!-- 表示哪个异常，跳转到哪个异常页面 -->
				<prop key="java.lang.ArrayIndexOutOfBoundsException">jsp_exceptionHandler/error</prop>
			</props>
		</property>
	</bean>
</beans>
